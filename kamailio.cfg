#!KAMAILIO

#!define DS_LIST "/etc/kamailio/dispatcher.list"
##!define LISTEN_UDP_PUBLIC udp:<external_ip_addr>:5060
#!define LISTEN_UDP_PRIVATE udp:<internal_ip_addr>:5060

/* set paths to location of modules */
# mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"


####### Global Parameters #########
#mhomed=1 # doesn't work with virtual IPs

#!ifdef WITH_DEBUG
debug=4
#!else
debug=2
#!endif
log_stderror=no

memdbg=5
memlog=5

log_facility=LOG_LOCAL6

fork=yes
children=4

auto_aliases=no

#listen=LISTEN_UDP_PUBLIC
listen=LISTEN_UDP_PRIVATE

####### FLAGS ######
#!define FLAG_FROM_FREESWITCH 10
#!define FLAG_FROM_PEER 11

sip_warning=no

####### Modules Section ########
loadmodule "tm.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "jsonrpcs.so"
loadmodule "dispatcher.so"
loadmodule "nathelper.so"
loadmodule "rtpengine.so"
loadmodule "stun.so"
loadmodule "uac.so"
loadmodule "ipops.so"

# ----------------- setting module-specific parameters ---------------

# ----- dispatcher params -----
modparam("dispatcher", "list_file", DS_LIST)
modparam("dispatcher", "flags", 2)
#modparam("dispatcher", "dst_avp", "$avp(AVP_DST)")
#modparam("dispatcher", "grp_avp", "$avp(AVP_GRP)")
#modparam("dispatcher", "cnt_avp", "$avp(AVP_CNT)")
#modparam("dispatcher", "sock_avp", "$avp(AVP_SOCK)")

#modparam("rr", "enable_full_lr", 1)
#modparam("rr", "append_fromtag", 1)
# ----- rtpproxy params -----
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:2222")
modparam("nathelper", "received_avp", "$avp(s:rcv)")


####### Routing Logic ########
# main request routing logic

route {
        # per request initial checks
        route(SANITY_CHECK);

        # CANCEL processing
        if (is_method("CANCEL")) {
                if (t_check_trans()) {
                        t_relay();
                }
                exit;
        }

        # check src ip and set flag
        route(CHECK_SOURCE_IP);

        # always add record_route when forwarding SUBSCRIBEs
        if (is_method("SUBSCRIBE")) {
                exit;
        }

        # handle requests within SIP dialogs
        route(WITHINDLG);

        ### only initial requests (no To tag)
        t_check_trans();

        # dispatch destinations
        route(DISPATCH);
}

route[SANITY_CHECK] {
    # 校验当前请求
    # Notsupport PUBLISH METHOD
    if (is_method("PUBLISH")) {
        send_reply("403", "Forbidden");
        exit;
    }
    if (!mf_process_maxfwd_header("10")) {
            xlog("L_WARN", "$ci|end|too much hops, not enough barley");
            send_reply("483", "Too Many Hops");
            exit;
    }

    if (!sanity_check()) {
            xlog("L_WARN", "$ci|end|message is insane");
            exit;
    }

    if ($ua == "friendly-scanner" ||
            $ua == "sundayddr" ||
            $ua =~ "sipcli" ) {
            xlog("L_WARN", "$ci|end|dropping message with user-agent $ua");
            exit;
    }

}

route[CHECK_SOURCE_IP] {
    # 通过$hdr或者指定报文头
    #if ($hdr(From) == "sip:user@example.com") {
        # From 报文头的值为 "sip:user@example.com"
    #}
    # 判断是否时某一个代理请求
    if(ds_is_from_list('2')) {
        setflag(FLAG_FROM_FREESWITCH);
    } else {
        setflag(FLAG_FROM_PEER);
    }
}

route[RELAY] {

    if (is_method("INVITE")) {
        if(!t_is_set("failure_route")) {
            t_on_failure("MANAGE_FAILURE");
        }
    }

    if (is_method("BYE")) {
            xlog("L_WARN", "$rm $rmid delete rtpengine \n ");
            rtpengine_delete();
    }

    if (isflagset(FLAG_FROM_PEER)) {
            xlog("L_WARN", "$rm $rmid commented out using USP private \n ");
            # 强制使用私有端口发送
            force_send_socket(LISTEN_UDP_PRIVATE);
    } else {
            xlog("L_WARN", " commented out using USP public \n ");
        #     force_send_socket(LISTEN_UDP_PUBLIC);
    }


    if (!t_relay()) {
            sl_reply_error();
    }
    #exit;
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
    if (has_totag()) {
        # sequential request withing a dialog should take the path determined by record-routing
        # 如果已经进入了路由状态，则走以下的路径
        if (loose_route()) {
                xlog("L_WARN", "$rm $rmid receive xxxxxxxx \n ");
                route(RELAY);
        } else {
                if (is_method("NOTIFY")) {
                    route(RELAY);
                }

                if (is_method("SUBSCRIBE") && uri == myself) {
                    # in-dialog subscribe requests
                    exit;
                }

                if (is_method("ACK")) {
                    if (t_check_trans()) {
                        # non loose-route, but stateful ACK;
                        # must be ACK after a 487 or e.g. 404 from upstream server
                        t_relay();
                        exit;
                    } else {
                        # ACK without matching transaction ... ignore and discard.
                        exit;
                    }
                }
                sl_send_reply("404","Not here");
        }
        exit;
    }
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
        if (t_is_canceled()) {
           exit;
        }
}

onreply_route[1] {
        if (has_body("application/sdp")) {
            rtpengine_answer();
        }
}

# onreply_route[2] {
#         if (has_body("application/sdp")) {
#                 rtpengine_offer();
#         }
# }

# Dispatch requests
route[DISPATCH] {
        # round robin dispatching on gateways group '1'
        # record routing for dialog forming requests (in case they are routed)
        # - remove preloaded route headers
        remove_hf("Route");
        if (is_method("INVITE|REFER")) {
                if (!has_body("application/sdp")) {
                   send_reply("400","Missing SDP body");
                   exit;
                }
                record_route();
                if (has_body("application/sdp")) {
                    if (rtpengine_offer("codec-mask=all codec-transcode=PCMA codec-transcode=PCMU")) {
                        xlog("L_WARN", "$rm $rmid receive INVITE \n ");
                        t_on_reply("1");
                    }
                }
                if (isflagset(FLAG_FROM_PEER)) {
                    # ds_select_dst 第一个参数标识路由的组，第二个参数标识路由策略，路由策略见https://kamailio.org/docs/modules/4.3.x/modules/dispatcher.html#dispatcher.f.ds_select_dst
                    if(!ds_select_dst("2", "4")) {
                        send_reply("404", "No destination");
                        exit;
                    }
                } else if (isflagset(FLAG_FROM_FREESWITCH)){
                    if(!ds_select_dst("1", "4")) {
                        send_reply("404", "No destination");
                        exit;
                    }
                }
        }

        if(is_method("REGISTER")){
	        if (isflagset(FLAG_FROM_PEER)) {
                # 路由至内部freeswitch，当做代理使用
                if(!ds_select_dst("2", "4")) {
                    send_reply("404", "No destination");
                    exit;
                }
            } else if (isflagset(FLAG_FROM_FREESWITCH)){
                # 路由至gateway网关
                if(!ds_select_dst("1", "4")) {
                    send_reply("404", "No destination");
                    exit;
                }
            }
        }
        route(RELAY);
}